name: CI checks

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install clang-format
        run:  |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update && sudo apt-get install -y clang-format-17
          sudo rm /usr/bin/clang-format
          sudo ln -s /usr/bin/clang-format-17 /usr/bin/clang-format
      - name: Format
        run: |
          source ./scripts/bootstrap.sh
          devtool format --no-fix --check
  build:
    runs-on: ${{ matrix.os }}
    needs: format
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        c_compiler: [gcc, clang, cl]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cxx_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cxx_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cxx_compiler: cl
          - os: macos-latest
            c_compiler: clang
            cxx_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: cl
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Set up CMake ${{ matrix.c_compiler }} ${{ matrix.cxx_compiler }}
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28.x'
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x
      - name: Build dotnet
        run: |
          cd src/unnamed-engine/assembly-test && dotnet publish -c ${{ matrix.build_type }}
      - name: Set up Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
        with:
          version: '1.11.1'
      - uses: ilammy/msvc-dev-cmd@v1
        if: matrix.c_compiler == 'cl'
        with:
          arch: amd64
      - name: Generate build files
        run: >
          cmake -B build -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }}
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - name: Build
        run: cmake --build build
  clang-tidy:
    needs: build
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Ubuntu dependencies
        run: |
          sudo wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama-dev clang-tidy-17
          sudo rm /usr/bin/clang-tidy
          sudo ln -s /usr/bin/clang-tidy-17 /usr/bin/clang-tidy
          wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip -O ninja-linux.zip && \
            sudo unzip ninja-linux.zip -d /usr/bin && \
            sudo rm ninja-linux.zip

      - name: Configure CMake
        run: >
          cmake -B build
          -G Ninja
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          -S ${{ github.workspace }}

      - name: Run clang tidy
        id: clang-tidy
        uses: mathiasvr/command-output@v2.0.0
        timeout-minutes: 40
        with:
          run: source ./scripts/bootstrap.sh && devtool tidy -v
      - name: Comment PR
        # Only execute if clang-tidy found errors
        if: ${{ failure() && github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ### Clang-Tidy found errors
            <details>
            <summary>Click to expand</summary>

            ```
            ${{ steps.clang-tidy.outputs.stdout }}
            ```

            </details>
